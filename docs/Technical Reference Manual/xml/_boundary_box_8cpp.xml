<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_boundary_box_8cpp" kind="file" language="C++">
    <compoundname>BoundaryBox.cpp</compoundname>
    <includes refid="_boundary_box_8h" local="yes">BoundaryBox.h</includes>
    <incdepgraph>
      <node id="15">
        <label>BoundaryBox.cpp</label>
        <link refid="_boundary_box_8cpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>POSITION.H</label>
      </node>
      <node id="18">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>BoundaryBox.h</label>
        <link refid="_boundary_box_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_boundary_box_8h" kindref="compound">BoundaryBox.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="class_boundary_box_1a7f8687dbb5b79bf3d54002ddb4722ff0" refkind="member"><highlight class="normal"><ref refid="class_boundary_box_1a7f8687dbb5b79bf3d54002ddb4722ff0" kindref="member">BoundaryBox:: BoundaryBox</ref>(Position<sp/>centre,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rotationAngle):</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>centre_(centre),<sp/>width_{width},<sp/><ref refid="class_boundary_box_1aae1686f559881ce7200bfb7053e6f929" kindref="member">height_</ref>{height},<sp/><ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref>{rotationAngle}</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1ab955a613deab2629c4d780bf79463a70" kindref="member">constructBoundaryBox</ref>();</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="class_boundary_box_1ac5f649399746662fa0176e95c632ca9c" refkind="member"><highlight class="normal">vector&lt;Position&gt;<sp/><ref refid="class_boundary_box_1ac5f649399746662fa0176e95c632ca9c" kindref="member">BoundaryBox::getVertices</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" refkind="member"><highlight class="normal">Position<sp/><ref refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" kindref="member">BoundaryBox::calculateVertex</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="class_boundary_box_1a897a8c477d6822a62725ca75269c813f" kindref="member">centre_</ref>.getX_pos()<sp/>+<sp/>radius*std::cos(angle+(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref>*<ref refid="_boundary_box_8h_1adc2f2809730e32868dbca4d9a6c314bb" kindref="member">pi</ref>/180.0f));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="class_boundary_box_1a897a8c477d6822a62725ca75269c813f" kindref="member">centre_</ref>.getY_pos()<sp/>-<sp/>radius*std::sin(angle+(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref>*<ref refid="_boundary_box_8h_1adc2f2809730e32868dbca4d9a6c314bb" kindref="member">pi</ref>/180.0f));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Position{x,y};</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_boundary_box_1acf00608cd66309da5475b0d440ec7b64" refkind="member"><highlight class="normal">tuple&lt;float,<sp/>float&gt;<sp/><ref refid="class_boundary_box_1acf00608cd66309da5475b0d440ec7b64" kindref="member">BoundaryBox::pointModArg</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opposite,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>adjacent){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>std::atan(opposite/adjacent);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>opposite/std::sin(angle);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{angle,<sp/>radius};</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_boundary_box_1a7c1a771b3bae59a88bce67dc3a00856d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_boundary_box_1a7c1a771b3bae59a88bce67dc3a00856d" kindref="member">BoundaryBox::sortPoints</ref>(){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp_vertex<sp/>=<sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>.clear();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_yMin<sp/>=<sp/>begin(temp_vertex);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_yMax<sp/>=<sp/>begin(temp_vertex);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_xMin<sp/>=<sp/>begin(temp_vertex);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_xMax<sp/>=<sp/>begin(temp_vertex);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_vertex<sp/>=<sp/>temp_vertex.begin()+1;<sp/>iter_vertex!=end(temp_vertex);<sp/>iter_vertex++){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>iter_vertex-&gt;getX_pos();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>iter_vertex-&gt;getY_pos();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>iter_xMin-&gt;getX_pos()){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_xMin<sp/>=<sp/>iter_vertex;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/>iter_xMax-&gt;getX_pos()){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_xMax<sp/>=<sp/>iter_vertex;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&lt;<sp/>iter_yMin-&gt;getY_pos()){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_yMin<sp/>=<sp/>iter_vertex;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;<sp/>iter_yMax-&gt;getY_pos()){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_yMax<sp/>=<sp/>iter_vertex;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>.push_back(*iter_xMin);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>.push_back(*iter_yMin);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>.push_back(*iter_yMax);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref>.push_back(*iter_xMax);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_boundary_box_1ab955a613deab2629c4d780bf79463a70" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_boundary_box_1ab955a613deab2629c4d780bf79463a70" kindref="member">BoundaryBox::constructBoundaryBox</ref>(){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upper<sp/>LEFT<sp/>point<sp/>and<sp/>Lower<sp/>Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[angle,<sp/>radius]<sp/>=<sp/><ref refid="class_boundary_box_1acf00608cd66309da5475b0d440ec7b64" kindref="member">pointModArg</ref>(<ref refid="class_boundary_box_1a3f2d30f339ddb5f89856a9d5aafc20c6" kindref="member">width_</ref>/2.0,<sp/><ref refid="class_boundary_box_1aae1686f559881ce7200bfb7053e6f929" kindref="member">height_</ref>/2.0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>angle+=<ref refid="_boundary_box_8h_1adc2f2809730e32868dbca4d9a6c314bb" kindref="member">pi</ref>/2;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp_Vertex1<sp/>=<sp/><ref refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" kindref="member">calculateVertex</ref>(radius,<sp/>angle);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp_Vertex4<sp/>=<sp/><ref refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" kindref="member">calculateVertex</ref>(radius,<sp/>angle+<ref refid="_boundary_box_8h_1adc2f2809730e32868dbca4d9a6c314bb" kindref="member">pi</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upper<sp/>RIGHT<sp/>point<sp/>and<sp/>Lower<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[angle_1,<sp/>radius_1]<sp/>=<sp/><ref refid="class_boundary_box_1acf00608cd66309da5475b0d440ec7b64" kindref="member">pointModArg</ref>(<ref refid="class_boundary_box_1aae1686f559881ce7200bfb7053e6f929" kindref="member">height_</ref>/2.0,<sp/><ref refid="class_boundary_box_1a3f2d30f339ddb5f89856a9d5aafc20c6" kindref="member">width_</ref>/2.0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp_Vertex2<sp/>=<sp/><ref refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" kindref="member">calculateVertex</ref>(radius_1,<sp/>angle_1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp_Vertex3<sp/>=<sp/><ref refid="class_boundary_box_1a1cba9f491c3a5426b9ee2528724d5a08" kindref="member">calculateVertex</ref>(radius_1,<sp/>angle_1+<ref refid="_boundary_box_8h_1adc2f2809730e32868dbca4d9a6c314bb" kindref="member">pi</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Order<sp/>of<sp/>points<sp/>in<sp/>vector</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>upperLeft</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>upperRight</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bottomLeft</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bottomRight</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref>==0){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Position&gt;<sp/>temp<sp/>{temp_Vertex1,<sp/>temp_Vertex2,<sp/>temp_Vertex3,<sp/>temp_Vertex4};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref>==-90<sp/>||<sp/><ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref><sp/>==<sp/>270){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Position&gt;<sp/>temp<sp/>{temp_Vertex3,<sp/>temp_Vertex1,<sp/>temp_Vertex4,<sp/>temp_Vertex2};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref><sp/>==<sp/>90<sp/>||<sp/><ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref><sp/>==<sp/>-270){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Position&gt;<sp/>temp<sp/>{temp_Vertex2,<sp/>temp_Vertex4,<sp/>temp_Vertex1,<sp/>temp_Vertex3};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref><sp/>==<sp/>-180<sp/>||<sp/><ref refid="class_boundary_box_1af3fe4268ffbd8de696a92d5dfbe6f658" kindref="member">rotationAngle_</ref><sp/>==<sp/>180){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Position&gt;<sp/>temp<sp/>{temp_Vertex4,<sp/>temp_Vertex3,<sp/>temp_Vertex2,<sp/>temp_Vertex1};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Position&gt;<sp/>temp<sp/>{temp_Vertex1,<sp/>temp_Vertex2,<sp/>temp_Vertex3,<sp/>temp_Vertex4};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a246c4bfcc9da01012fbedfa879fcd265" kindref="member">vertices_</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_boundary_box_1a7c1a771b3bae59a88bce67dc3a00856d" kindref="member">sortPoints</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_boundary_box_1a65bb6862f97d835fe47776fe7315b4f7" refkind="member"><highlight class="normal"><ref refid="class_boundary_box_1a65bb6862f97d835fe47776fe7315b4f7" kindref="member">BoundaryBox::~BoundaryBox</ref>()</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Lynch-Stephen/Documents/Lecture Notes/3rd year/Semester II/ELEN3009/2018/Project/Code/game-source-code/BoundaryBox.cpp"/>
  </compounddef>
</doxygen>
